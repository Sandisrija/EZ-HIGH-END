______________BINARY SEARCH TREE_____________

Binary tree  time complexity is O(n)

* left<root<right
* elements in left binary search tree should be less than the root.
* elements in right should be the greater than the root node.
* time complexity of binary search tree is O(n*logn).
* if we want to find the min element,we need to traverse to the left part.
* whereas we need to traverse right to get the maximum element of the binary search tree.

if i is the parent node Index:
then left=2i+1
ie. right=2i+2 

* if we need to insert element, we need to check the hEIGHT balancing.
* height balancing is a imp concept.
* if bst is height balanced then searching of an element takes O(logn) time onlyy.

eg: 1 2 3 4 5 6
mid element is 3
* left elements of 3 will be lesser elements to rootnode.
* right elements will be the greater elements for rootnode.
then the tree will be height balancing.
_______________________________________________________________________________________
700) SEARCH IN A BINARY SEARCH TREE

PROBLEM STATEMENT:
You are given the root of a binary search tree (BST) and an integer val.
Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.
Example 1:
Input: root = [4,2,7,1,3], val = 2
Output: [2,1,3]

//OUTPUT:

# Definition for a binary tree node.
# class TreeNode:
#     def _init_(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        if root==None:
            return 
        if root.val==val:
            return root
        elif root.val>val:
            return self.searchBST(root.left,val)
        else:
            return self.searchBST(root.right,val)

_________________________________________________________________________________________________
CONVERT SORTED ARRAY TO BINARY SEARCH TREE.(LEET CODE: 108)
//CODE:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:
        def fun(si,li):
            if si<=li:
                mid=(si+li)//2
                root=TreeNode(nums[mid])
                root.left=fun(si,mid-1)
                root.right=fun(mid+1,li)
                return root
        return fun(0,len(nums)-1)
___________________________________________________________________________________________________
701) INSERT INTO A BINARY SEARCH TREE. (leetcode)

ou are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.
Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.
Example 1:
Input: root = [4,2,7,1,3], val = 5
Output: [4,2,7,1,3,5]
//code:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        if root==None:
            return TreeNode(val)
        if root.val>val:
            root.left = self.insertIntoBST(root.left, val)
        else:
            root.right = self.insertIntoBST(root.right, val)
        return root
______________________________________________________________________________________________________

104) FINDING THE MAX DEPTH OF THE BINARY TREE.

//CODE:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
            if not root:
                return 0
            leftdepth=self.maxDepth(root.left)
            rightdepth=self.maxDepth(root.right)
            return 1+ max(leftdepth,rightdepth)  #1 is for node.
            
_______________________________________________________________________________________________________
            GRAPHS:
BREADTH FIRST SEARCH:

*USES QUEUE.
*STARTS with one node and checks other nodes.

* find if path exists in graph::

PROBLEM STATEMENT:
There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.
You want to determine if there is a valid path that exists from vertex source to vertex destination.
Given edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.

Example 1:
Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2
Output: true
Explanation: There are two paths from vertex 0 to vertex 2:
- 0 → 1 → 2
- 0 → 2

#CODE:


class Solution:
    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:
        if not edges:
            return True
        d={i: [] for i in range(n)}
        for i,j in edges:
            d[i].append(j)
            d[j].append(i)
        q=[source]
        vis=set()
        while q:
            a=q.pop(0)
            for i in d[a]:
                if i==destination:
                    return True
                if i not in vis:
                    q.append(i)
                    vis.add(i)
        return False
________________________________________________________________________________________________________________________________
1791) FIND THE CENTER OF THE STAR GRAPH.
problem statement:

There is an undirected star graph consisting of n nodes labeled from 1 to n. A star graph is a graph where there is one center node and exactly n - 1 edges that connect the center node with every other node.
You are given a 2D integer array edges where each edges[i] = [ui, vi] indicates that there is an edge between the nodes ui and vi. Return the center of the given star graph.
example;   4
           2
         1   3
HERE CENTER IS 2.

//code:

class Solution:
    def findCenter(self, edges: List[List[int]]) -> int:
        if edges[0][0]==edges[1][0] or edges[0][0]==edges[1][1]:
            return edges[0][0]
        else:
            return edges[0][1]
_________________________________________________________________________________________________________________________________
997) FIND THE TOWN JUDGE.

problem statement:

In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi. If a trust relationship does not exist in trust array, then such a trust relationship does not exist.
Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.
Example 1:

Input: n = 2, trust = [[1,2]]
Output: 2
Example 2:

Input: n = 3, trust = [[1,3],[2,3]]
Output: 3
Example 3:

Input: n = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1


#CODE:

class Solution:
    def findJudge(self, n: int, trust: List[List[int]]) -> int:
        count=[0]*(n+1) 
        for a,b in trust:
            count[a]-=1
            count[b]+=1 
        for i in range(1,n+1):
            if count[i]==n-1:
                return i
        return -1
___________________________________________________________________________________________________________________________









