Today's topics to be covered:-  Binary Search-floor,binary search related problems and pointers.

LEET CODE: Q.No 35

largest element in the array which is less than target. is called floor value....

Q) sorted array. we need to find the target element.if the target elementis found we need to return element.If the element is not found we need to find the floor and
the ceil value...
______________________________________________________________________________

//CODE

def bs_floor(arr,target):
    start=0
    end=len(arr)-1  #last element index
    floor=-1        # initialising the floor index as -1.
    while(start<=end):
        mid=((start+end)//2)
        if l[mid]==target:
            print(l[mid])
            break
        elif l[mid]<target:
            floor=l[mid]
            start=mid+1
        else:
            ceil=l[mid]
            end=mid-1
_____________________________________________________________________________________
//CODE

def bsfloor(l,target,si,li,floor):
    if si<=li:
        mid=(si+li)//2
        if l[mid]==target:
            return l[mid]
        if l[mid]<target:
            floor=l[mid]
            return bsfloor(l,target,mid+1,li,floor)
        else:
            return bsfloor(l,target,si,mid-1,floor)
    return floor
l=[2,5,7,9,13]
target=6
print(bsfloor(l,target,0,len(l)-1,-1))

//OUTPUT:
5
_______________________________________________________________________________________

# finding the square root of the mid element in the array using loops.


n=int(input())
si=0
li=n//2
floor=-1
while si<=li:
    mid=(si+li)//2
    sq=mid*mid
    if sq==n:
        floor=mid
        break
    elif sq<n:
        floor=mid
        si=mid+1
    else:
        li=mid-1
print(floor)

//output:
25
5
____________________________________________________________________________________________
#finding the square root of mid element in the array using recursion.

def sqrt(n,si,li,floor):
    if n<0:
        return -1
    if n==1:
        return 1
    if si<=li:
        mid=(si+li)//2
        sq=mid*mid
        if sq==n:
            return mid
        elif sq<n:
            floor=mid
            return sqrt(n,mid+1,li,floor)
        else:
            return sqrt(n,si,mid-1,floor)
    return floor
n=int(input())
print(sqrt(n,0,n//2,-1))

//OUTPUT:
25
5
_______________________________________________________________________________________________
#finding the exact squareroot of a number..


def sqry_binary_search(num, epsilon=1e-6):
    if num<0:
        raise ValueError("can't compute square root")
    if num<1:
        left,right=num,1
    else:
        left,right=0,num
    while abs(left-right)>epsilon:
        mid=(left+right)/2
        mid_square=mid*mid
        if mid_square<num:
            left=mid
        else:
            right=mid
    return (left+right)/2
num=25
res=sqry_binary_search(num)
print(f"square root of {num} is approximately ",res)
        


//OUTPUT:

square root of 25 is approximately  5.000000074505806
______________________________________________________________________________________________
Q52) peak element in an array.

An array arr is a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i] 
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

You must solve it in O(log(arr.length)) time complexity.

 

Example 1:

Input: arr = [0,1,0]
Output: 1
----code::

class Solution:
    def peakIndexInMountainArray(self, arr: List[int]) -> int:
        l,r=0,len(arr)-1
        while l<=r:
            m=(l+r)//2
            if arr[m+1] < arr[m] and arr[m-1] < arr[m]:
                return m
            if arr[m+1]>arr[m]:
                l=m+1
            else:
                r=m
_______________________________________________________________________________________________________

singly linked list:(pointers)

for detecting cycle in the singly linked list.we use slow and fast pointers.
slow will move 1 step.
fast will move 2 step.


left and right travels in different directions. whereas slow and fast travels in same direction..
left:left will start at left index.
right:right will start at right last index.

2 5 8 10
l      r

while left<right:
    if l[left]+l[right]==target:
        found
    elif sum>target:
	left+=1
   else:
	right+=1


___________________________________________________________________________________________________________



1) check whether if a string has valid palindrome. solve this using LEFT and RIGHT.

def haspalin(s):
    def ispalin_xv(left,right):
        while left>=0 and right<n and s[left]==s[right]:
            left=1
            right+=n
        return s[left+1.right-1]
___________________________________________________________________________________________________________

