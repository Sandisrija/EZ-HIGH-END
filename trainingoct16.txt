______________******************DATA STRUCTURES****************____________

* basic program.

class node:
    def __init__(self,val=0): #constructor.
        self.val=val
        self.next=None
o1=node(1)
o2=node(2)
o3=node(3)
o1.next=o2
o2.next=o3
print(o1,o1.val,o1.next,sep='\n')
print(o2,o2.val,o2.next,sep='\n')
print(o3,o3.val,o3.next,sep='\n')

//output:
<__main__.node object at 0x000001505CDECF10>
1
<__main__.node object at 0x000001505D4151D0>
<__main__.node object at 0x000001505D4151D0>
2
<__main__.node object at 0x000001505D4153D0>
<__main__.node object at 0x000001505D4153D0>
3
None
_______________________________________________________________________________
LINKEDLIST PROGRAMS:(inserting,deleting)

class node:
    def init(self,val=0):
        self.val=val
        self.next=None
class sll:
    def init(self):
        self.head=None
    def insertatbeg(self,data):
        if self.head==None:dl
            self.head=node(data)
        else:
            self.head.next=node(data)
    def insertatend(self,data):
        if self.head==None:
            self.head=node(data)
        else:
            curr=self.head
            while(curr.next):
                curr=curr.next
            new=node(data)
            curr.next=new
    def deleteatbeg(self):
        if self.head==None:
            return
        temp=self.head
        self.head=self.head.next
        temp.next=None
        return temp.val
    def delatend(self):
        if self.head==None:
            return 
        temp=self.head
        while(temp.next.next):
            temp=temp.next
        temp.next=None
    def printing(self):
        temp=self.head
        while(temp):
            print(temp.val,end="->")
            temp=temp.next
'''def insertatbeg(head,data):
    pass'''
'''o1=node(1)
o1.next=node(2)
o1.next.next=node(3)'''
#o1.next=o2 #itself is an object
#o2.next=o3
#print(o1) #prints memory location
#print(o1,o2,o3,sep='\n')
#print(o1.val,o2.val,o3.val,sep='\n')
'''print(o1,o1.val,o1.next)
print(o2,o2.val,o2.next)'''
l=[2,4,6,8,9]
o=sll()
for i in l:
    o.insertatbeg(i)
o.printing()

_________________________________________________________________________________________________________________________________

[LEET CODE PROBLEMS]
CONVERTING THE BINARY NUMBERS IN A LINKED LIST TO INTEGERS:

PROBLEM STATEMENT:
Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.
Return the decimal value of the number in the linked list.
The most significant bit is at the head of the linked list.

Example 1:
Input: head = [1,0,1]
Output: 5
Explanation: (101) in base 2 = (5) in base 10
Example 2:

Input: head = [0]
Output: 0

//CODE:


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def getDecimalValue(self, head: ListNode) -> int:
        s=""
        curr=head
        while(curr):
            s+=str(curr.val)
            curr=curr.next
        return int(s,2)
______________________________________________________________________________________________________________________________________

876) MIDDLE OF THE LINKED LIST.(USING SLOW AND FAST)

STATEMENT:
Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.
Example 1:
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

//CODE:
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow = head
        fast = head
        while fast and fast.next:  
            slow = slow.next  #moves one step ahead
            fast = fast.next.next #moves 2 step ahead
        return slow

_________________________________________________________________________________________________________
2096) DELETE THE MIDDLE NODE OF THE LINKED LIST:
PROBLEM STATEMENT:
You are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.
The middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing, where ⌊x⌋ denotes the largest integer less than or equal to x.
For n = 1, 2, 3, 4, and 5, the middle nodes are 0, 1, 1, 2, and 2, respectively.
Example 1:
Input: head = [1,3,4,7,1,2,6]
Output: [1,3,4,1,2,6]

//code:

class Solution:
    def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        newnode=ListNode()
        newnode.next=head
        slow=newnode
        fast=head
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next
        slow.next=slow.next.next
        return newnode.next
        
_____________________________________________________________________________________________________

DOUBLY LINKED LIST:

class node:
    def __init__(self,val=0):
        self.val=val
        self.next=None
        self.prev=None
class dll:
    def __init__(self):
        self.head=None
        self.tail=None
    def insertatbeg(self,data):
        if self.head==None:
            self.head=node(data)
            self.tail=self.head
        else:
            new=node(data)
            new.next=self.head
            self.head.prev=new
            self.head=new
    def insertatend(self,data):
        if self.head==None:
            self.head=node(data)
            self.tail=self.head
        else:
            new=node(data)
            new.prev=self.tail
            self.tail.next=new
            self.tail=new
    def deleteatbeg(self):
        if self.head==None:
            return
        self.head=self.head.next
        self.head.prev=None
    def delatend(self):
        if self.head==None:
            return 
        self.tail=self.tail.prev
        self.tail.next=None
        
    def printing(self):
        temp=self.head
        while(temp):
            print(temp.val,end="->")
            temp=temp.next
l=[2,4,6,8,9]
o=dll()
for i in l:
    o.insertatbeg(i)
o.printing()

_______________________________________________________________________________________________________________

203) REMOVE LINKED LISTS ELEMENTS.

PROBLEM STATEMENT:

Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.
Example 1:
Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]

Example 2:
Input: head = [], val = 1
Output: []

//code:

class Solution:
  def removeElements(self, head: ListNode, val: int) -> ListNode:
    dummy=ListNode(0, head)
    prev=dummy
    while head:
      if head.val!=val:
        prev.next=head
        prev=prev.next
      head=head.next
    prev.next=None
    return dummy.next

________________________________________________________________________________________________________________-