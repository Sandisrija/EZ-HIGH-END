-----------COUNT SORT---------(unstable sorting technique)

* merge sort is stable sorting technique.(sequence)
* bubble sort is stable sorting technique.(sequence)
* insertion sort is stable sorting technique.
* selection sort is unstable sorting technique,because we are changing the positions.

------------------------------------------------------------------
* COUNT SORT is used mostly when array has duplicate elements.

* THE COMPLEXITY OF COUNT SORT IS LESS.AND COUNT SORT IS MORE FEASIBLE.

interview question:: which sorting you will prefer? depends on list..if range is high we use bubble sort.
//code for count sort

l=[2,4,8,3,8,1,2,4,7,4]
count=[0 for i in range(10)] #starting the count is 0 for all elements.
for i in range(len(l)):
    count[l[i]]+=1
#for cumulative addition
for i in range(1,len(count)):
    count[i]+=count[i-1]
#print(count)
res=[0]*len(l)
for i in range(len(l)):
    res[count[l[i]]-1]=l[i]
    count[l[i]]-=1
print(*res,sep=", ")

//output:

1, 2, 2, 3, 4, 4, 4, 7, 8, 8
-------------------------------------------------------------------------------------------------------

Every variable,list in python is a object..
nd every datatype is a class.

__________________________________________________________
for loop syntax in python:

FOR VARIABLE IN RANGE():

IN is a membership operator.
____________________________________________________________
converting integer to float.

integer_value = int(input())
float_value = integer_value + 0.0
print(float_value)   

//output:
36
36.0
_____________________________________________________________
integer_list = [1, 2, 3, 4, 5]
float_list = [float(x) for x in integer_list]
print(float_list)
 
//output:
[1.0, 2.0, 3.0, 4.0, 5.0]
______________________________________________________________
addition of lists using map function

def fun(a):
    return sum(a)
l=[[1,2,3],[2,3,4],[5,5,5]]
l=list(map(fun,l))
print(*l)

//output:
6 9 15
_______________________________________________________________

l=[[1,3,2],[8,6,7],[9,0,0]]
l.sort(key=lambda x:x[0]+x[1])
print(l)

//output:
[[1, 3, 2], [9, 0, 0], [8, 6, 7]]
________________________________________________________________

VERY IMPORTANT FUNCTION:: ZIP FUNCTION

a=[1,3,4,5,6,9]
b=[1,2,3,2,1,3]
print(list(zip(a,b)))

//OUTPUT:

[(1, 1), (3, 2), (4, 3), (5, 2), (6, 1), (9, 3)]
_____________________________________________________________

VERY IMPORTANT FUNCTION:: ENUMERATE FUNCTION

a=[1,3,4,5,6,9]
b=[1,2,3,2,1,3]
print(list(enumerate(a)))

//OUTPUT:
[(0, 1), (1, 3), (2, 4), (3, 5), (4, 6), (5, 9)]
____________________________________________________________________

TIME COMPLEXTIES OF SEARCHING ALGORITHMS:

BINARY SEARCH,LINEAR SEARCH.


binary search time complexity:: O(logn).
depth of binary search tree is: logn
(dividing the array and finding the mid)

algorithm:


def binary(l,si,li,se):
    mid=si+li//2
    if l[mid]==se:
        return l[mid]
    if l[mid]<se:
        binary(l,mid+1,li,se)
    return binary(l,si,mid-1,se)

_____________________________________________________________________
MASTERS THOEREM:

a T(n/b)+f(n)
a -> no.of subproblems
b -> factors
f(n) -> for outside recursion.
n/b -> for inside recursion.
_____________________________________________________________________

TASK:
1) find the sum of array elements.(divide and conquer algorithm)
2) find the max element in an array.

//sum of array elements

def recursive_sum(arr, n):
    if n == 0:
        return 0
    else:
        return arr[n - 1] + recursive_sum(arr, n - 1)
arr = list(map(int,input().split()))
result = recursive_sum(arr, len(arr))
print(result)

//output:

1 2 3 4 5 6 7 8 9 10
55


//divide and conquer logic for sum of array elements

def sumar(l,si,fi):
    if si==fi:
        return l[si]
    if si>li:
        return -1
    mid=si+fi//2
return sumar(l,si,mid)+sumar(l,mid+1,li)
___________________________________________________________________________________
To check whether the array is sorted or not.

def is_sorted(arr):
    for i in range(len(arr) - 1):
        if arr[i] > arr[i + 1]:
            return False
    return True
my_array =list(map(int,input().split(",")))
if is_sorted(my_array):
    print(True)
else:
    print(False)

//output:

1 2 3 4 5 6
True

_____________________________________________________________________________________










