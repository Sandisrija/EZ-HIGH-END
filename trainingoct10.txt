TOPICS FOR TODAY: LEETCODE PROBLEMS REGARDING 3POINTER,HASHING.
Leetcode:

75) SORT COLOURS:
 * we can use nums.sort() directly.
 * using counting sort.
 * 3-pointer..

//USING THREE POINTER ALGORITHM::

class Solution:
    def sortColors(self, nums: List[int]) -> None:
        l=i=0
        r=len(nums)-1
        while i<=r:
            if nums[i]==0:
                nums[l],nums[i]=nums[i],nums[l]
                l+=1
                i+=1
            elif nums[i]==1:
                i+=1
            elif nums[i]==2:
                nums[r],nums[i]=nums[i],nums[r]
                r-=1
//OUTPUT:
nums =
[2,0,2,1,1,0]

[0,0,1,1,2,2]
_______________________________________________________________________________
42) TRAPPING RAINWATER:
 * we need to use three-pointer algorithm.
Based on the blocks,we need to fill the water.

//code using 2pointers.

class Solution:
    def trap(self, height: List[int]) -> int:
        if not height: return True
        l=0
        r=len(height)-1   #last index
        maxl=height[l]
        maxr=height[r]
        res=0
        while l<r:
            if maxl<maxr:
                l+=1
                maxl=max(maxl,height[l])
                res+=maxl-height[l]
            else:
                
                r-=1
                maxr=max(maxr,height[r]) 
                res+=maxr-height[r]
        return res
            
//OUTPUT:

height =
[0,1,0,2,1,0,1,3,2,1,2,1]

6
______________________________________________________________________________________ 

HASH TABLE:
HASHING: Open hashing
* chaining/closed addressing 
* open addressing or closed hashing.
* linear probing.
* quadratic probing.
* double hashing.
* mid square.
* wrapping.( used for large integer numbers)
* we have direct functions for hashing in python..
_______________________________________________________________________________________
HASHING: 
* hashing is a technique to reduce searching time in an algorithm at the expense of space complexity.
* HASH TABLE:
hashtable is an array in which we store elements according to some key and this key is calculated by hash function.
* HASH FUNCTION: It is used to find key from array elements..
HOW TO CHOOSE KEY:
TAKE PRIME NUMBERS LIKE 11,17 ETC...
For finding key we have four methods:
Those are:
1) DIVISION BY 10. ->"h(k)=i%10" where i is element in the array.
2) DIVISION BY n. ->"h(k)=i%n" (where n is not length of array.it can be any number)
3) MID SQUARE: 
	EXAMPLE:
	236.take mid element.square it. 9 -> at 9th index we will store the element.
4) WRAPPING: This is used mainly for large integer numbers..

LOAD FACTOR: no.of elements in hash table/size of hash table.
COLLISION: collision happens when hash function is giving same keys for more than one element.
To avoid collision.(collision resolution techniques):

******important for mcq's:-

1) Direct chaining/Close addressing/Open hashing: 
* If two or more array elements hashed  to same location.we connect them with the help of linked list.This is called as direct chaining.

2) Open addressing/closed hashing/closed chain: types:-
      * LINEAR PROBING:
		example:
   __________________________
    h(k)=i%5
    rehash(k)=(i+1)%5
   ____________________________
3) Quadratic probing:
   example:
    l=[31,19,2,13,25,24]

31%11=9
19%11=8
2%11=2
13%11=2
(13+1*1)%11=3
25%11=3
(25+1*1)%11=4
24%11=2
(24+1*1)%11=3
(24+2*2)%11=6


2 index ->  11
3 index ->  13
4 index ->  25
6 index ->  24
8 index ->  19
9 index ->  31
__________________________________________________

4) Double hashing:

_____________________________________________
DOUBT CLARIFICATION SESSION:


def solve(arr):
    p1 = 0
    p2 = len(arr)-1
    while p1<p2:
        sum = arr[p1] + arr[p2]
        if sum == target:
            return (arr[p1], arr[p2])
        elif sum < target:
            p1 += 1
        else:
            p2 -= 1
    return False
    
arr = [2,3,4,5,6]
target = 17
result = solve(arr)
print(result)

___________________________________________________________________
binary search:

def binary_search(arr, low, high, key):
    if high >= low:
        mid = (low+high) // 2
        if arr[mid] == key:
            return mid
        if key < arr[mid]:
            return binary_search(arr, low, mid-1, key)
        if key > arr[mid]:
            return binary_search(arr, mid+1, high, key)
    else:
        return -1
arr = [1,2,3,4,5,6,7,8,9]
key = 11
res = binary_search(arr, 0, len(arr)-1, key)
if res == -1:
    print("element not present")
else:
    print("element is presen at : ", res)
______________________________________________________________________________________________
MERGE SORT:

def merge(left, right):
    result = []
    i,j = 0,0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1 
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result
   ____________________________________________________________
def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr)//2
    left_half = arr[:mid]
    right_half = arr[mid:]
    
    left_half = merge_sort(left_half)
    right_half = merge_sort(right_half)
    merged_arr = merge(left_half, right_half)
    return merged_arr
arr = [34, 78, 56, 71, 91, 12, 9]
sorted_arr = merge_sort(arr)
print(sorted_arr)





